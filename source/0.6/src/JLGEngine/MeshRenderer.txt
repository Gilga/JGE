function draw(data::IMeshData) # create & draw canvas, properties->activeMeshData

	#if (!data) throw NullException("Renderer : Mesh Data");
	if (!data) return;
	#if (!properties.ShaderManager->getActiveProgram()) return;

	# bind VAO
	glBindVertexArray(vao[1]) #*data->getVAO(MeshData::vao)

	if data->isIndex()
		#(_uenum)data->getMode()
		#data->getArrayCount()
		#GL_UNSIGNED_INT
		#(const void *)NULL
		glDrawElements(mode, count, GL_UNSIGNED_INT, nothing) #Ptr{UInt8}[pointer(nothing)]
	else
	#(_uenum)data->getMode()
	#data->getArrayCount()
	glDrawArrays(GL_TRIANGLES, 0, 6*2*3)
	end

	glBindVertexArray(0);
end


function update(mesh::IMesh)
	IMeshData* data = nothing

	if !mesh throw(ArgumentError(mesh)) end

	data = mesh->getMeshData()

	if !data throw(LoadError(data)) end

	#if (data->type == GL_INVALID_ENUM)
	#{
	#	_ERROR("No draw type specified.")
	#	return;
	#}

	data->setMode(VideoDriver<GLEW>::Array<>::convertType<_enum>(data->getType()))
	data->update()
	
	v_count = data->getCount(MeshData::vao)
	n_count = data->getCount(MeshData::nao)
	t_count = data->getCount(MeshData::tao)
	i_count = data->getCount(MeshData::iao)

	if !v_count
		_ERROR("VBO is empty.");
		return
	end

	if !n_count _DEBUG_MESSAGE("NBO is empty.") end
	else if n_count != v_count
		_WARNING("NBO count does not match with VBO count (%u != %u).", n_count, v_count)
	end

	if !t_count _DEBUG_MESSAGE("TBO is empty.") end
	else if t_count != v_count
		_WARNING("TBO count does not match with VBO count (%u != %u).", t_count, v_count)
	end

	if !i_count _DEBUG_MESSAGE("IBO is empty.") end

	vbo_size = data->getSize(MeshData::vao)
	nbo_size = data->getSize(MeshData::nao)
	tbo_size = data->getSize(MeshData::tao)
	ibo_size = data->getSize(MeshData::iao)

	_DEBUG_BREAK_IF(!vbo_size);
	if n_count _DEBUG_BREAK_IF(!nbo_size) end
	if t_count _DEBUG_BREAK_IF(!tbo_size) end
	if i_count _DEBUG_BREAK_IF(!ibo_size) end

	VideoDriver<GLEW>::Array<>::create((_uint*)data->getVAO(0))
	VideoDriver<GLEW>::Buffer<>::create((_uint*)data->getVBO(0), data->getVAOCount())
	
	if i_count VideoDriver<GLEW>::Buffer<>::create((_uint*)data->getIBO(0), data->getVAOCount()) end

	_uint aid = MeshData::vbo
	_uint vid = *data->getVBO(aid)
	_uint eid = data->getElement(aid)

	VideoDriver<GLEW>::Array<>::bind(*data->getVAO(MeshData::vao))
	VideoDriver<GLEW>::Buffer<>::bind((_uenum)GL_ARRAY_BUFFER, vid)

	printBuffer("VBO", aid, eid, vid, v_count)

	if !n_count && !t_count
		updateBuffer(aid, vbo_size, 0, eid, data->getPositions(), GL_STATIC_DRAW)

	else

		VideoDriver<GLEW>::Buffer<>::setData((_uenum)GL_ARRAY_BUFFER, (void*)(NULL), (ptrdiff_t)(vbo_size + nbo_size + tbo_size), (_uenum)GL_STATIC_DRAW)

		updateBuffer(aid, vbo_size, 0, eid, data->getPositions())

		if n_count > 0
			aid = MeshData::nbo; vid = *data->getVBO(aid);	eid = data->getElement(aid)
			printBuffer("NBO", aid, eid, vid, n_count)
			updateBuffer(aid, nbo_size, vbo_size, eid, data->getNormals())
		end

		if t_count > 0
			aid = MeshData::tbo; vid = *data->getVBO(aid);	eid = data->getElement(aid)
			printBuffer("TBO", aid, eid, vid, t_count)
			updateBuffer(aid, tbo_size, vbo_size + nbo_size, eid, data->getTexCoords())
		end
		
	end

	if i_count > 0
		aid = MeshData::iao; vid = *data->getIBO(MeshData::vbo); eid = data->getElement(aid)
		printBuffer("IBO", aid, eid, vid, i_count)

		VideoDriver<GLEW>::Buffer<>::bind((_uenum)GL_ELEMENT_ARRAY_BUFFER, vid)
		VideoDriver<GLEW>::Buffer<>::setData((_uenum)GL_ELEMENT_ARRAY_BUFFER, reinterpret_cast<void*>(data->getIndicies()), (ptrdiff_t)(ibo_size), (_uenum)GL_STATIC_DRAW)
	end

	# clean up
	VideoDriver<GLEW>::Array<>::unbind()
	VideoDriver<GLEW>::Buffer<>::unbind((_uenum)GL_ARRAY_BUFFER)
	VideoDriver<GLEW>::Buffer<>::unbind((_uenum)GL_ELEMENT_ARRAY_BUFFER)
end